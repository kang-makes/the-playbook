---
- name: Creating filesystem directories on target
  file:
    path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}/etc"
    mode: "0755"
    state: directory

- name: Downloading host's metadata
  git:
    repo: "{{ metadata_repo }}/{{ homd_prefix }}-{{ restic_hostname }}"
    dest: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}/etc"
    accept_hostkey: yes
    version: "{{ etckeeper_branch | default ('etckeeper')}}"
  register: _etckeeper

- name: Gather facts with extra host metadata (if last changed)
  setup:
    fact_path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}/etc/ansible/facts.d{% else %}{{ omit }}{% endif %}"
  when: _etckeeper.changed

- name: Restoring latest backup on non-bootstrapped (or forced restore)
  block:
  - name: Getting fstab
    slurp:
      src: "{% if not ansible_local.bootstrapped | default(false) -%}{{ root_target }}{% endif -%}/etc/fstab"
    register: fstab_slurp

  - name: Parsing fstab file
    set_fact:
      fstab: >-
        {% set dict_keys = [ 'src', 'path', 'fstype', 'opts', 'dump', 'passno' ] -%}
        {% set dict_values = item.split(' ') -%}
        {% set mount = dict(dict_keys | zip(dict_values)) -%}
        {% if not ansible_local.bootstrapped | default(false) -%}
          {% set mount = mount | combine({"path": root_target + mount["path"]})  -%}
        {% endif -%}
        {{ fstab | default([]) + [ mount ] }}
    when: item.split(' ') | length >= 4 and not item[0] == '#'
    loop: "{{ ( fstab_slurp.content | b64decode).split('\n')
              | map('regex_replace', '\t', ' ')
              | map('regex_replace', ' +', ' ')
              | list }}"

  - name: Getting mounted filesystems
    slurp:
      src: /proc/mounts
    register: mounted_slurp

  - name: Parsing mounted filesystems
    set_fact:
      mounted: "{{ mounted | default([]) + [ dict(
                 [ 'src', 'path', 'fstype', 'opts', 'dump', 'passno' ]
                 | zip( item.split(' ') )
                )] }}"
    when: item.split(' ') | length >= 4 and not item[0] == '#'
    loop: "{{ ( mounted_slurp.content | b64decode).split('\n')
              | map('regex_replace', '\t', ' ')
              | map('regex_replace', ' +', ' ')
              | list }}"

  - name: Calculating filesystems that needs to be mounted
    set_fact:
      to_mount: "{{ fstab | default([]) | difference( mounted | default([]) ) }}"

  - name: Mounting filesystems
    command:
      warn: no
      argv: [ "mount", "{{ item.src }}", "{{ item.path }}", "-t", "{{ item.fstype }}", "-o", "{{ item.opts }},x-mount.mkdir" ]
    changed_when: no
    loop: "{{ to_mount }}"

  - name: Restoring latest backup
    block:
    - name: Creating password file
      tempfile:
        state: file
        suffix: restic
      register: restic_passfile
      changed_when: no

    - name: Saving password on passfile
      copy:
        content: "{{ restic_password }}"
        dest: "{{ restic_passfile.path }}"
      changed_when: no

    - name: Finding all restic configuration files
      find:
        contains: "^BACKUP_PATH="
        depth: 1
        path: "{{ root_target }}/etc/restic"
        patterns: "*.conf"
      register: restic_config_files

    - name: Restoring every restic backup found
      command:
        argv:
          - /bin/bash
          - -c
          - |
            set -a
            source "{{ item }}"
            unset RESTIC_PASSWORD_COMMAND

            restic restore latest \
              --host="{{ restic_hostname }}" \
              --path="$BACKUP_PATH" \
              --password-file="{{ restic_passfile.path }}" \
              {% if not ansible_local.bootstrapped | default(false) %}--target="{{ root_target }}" {% endif %} \
              $EXTRA_GLOBAL_ARGS \
              $EXTRA_RESTORE_ARGS
      with_items: "{{ restic_config_files | json_query(\"files[*].path\") }}"
      register: restic_result
      failed_when: restic_result.rc != 0

    always:
    - name: Deleting password file
      file:
        path: "{{ restic_passfile.path }}"
        state: absent
      changed_when: no

    - name: Unmounting filesystems previously not mounted
      command:
        warn: no
        argv:
          - umount
          - "{{ item.path }}"
      changed_when: no
      loop: "{{ to_mount[::-1] | default ([])}}"
  when: not ansible_local.bootstrapped | default(false) or force_restic
  
