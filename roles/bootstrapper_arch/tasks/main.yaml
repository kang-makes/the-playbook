---
- name: Check if discovered distribution match with the inventory
  assert:
    that: '"archlinux" in group_names'
    fail_msg: "Expected to {{ansible_distribution|lower}} to be in those groups: {{ group_names | join(' ') }}"
    success_msg: "Distribution exists on host's groups"

- name: Creating filesystem directories on target
  file:
    path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}{{ item[0] }}"
    mode: "{{ item[1] }}"
    state: directory
  loop:
    - [ /var/cache/pacman/pkg, "0755" ]
    - [ /var/lib/pacman      , "0755" ]
    - [ /var/log             , "0755" ]
    - [ /dev                 , "0755" ]
    - [ /run                 , "0755" ]
    - [ /etc/pacman.d        , "0755" ]
    - [ /tmp                 , "1777" ]
    - [ /sys                 , "0555" ]
    - [ /proc                , "0555" ]

- name: Bootstrapping/Updating the system
  block:
  - name: Getting fstab
    slurp:
      src: "{% if not ansible_local.bootstrapped | default(false) -%}{{ root_target }}{% endif -%}/etc/fstab"
    register: fstab_slurp

  - name: Parsing fstab file
    set_fact:
      fstab: >-
        {% set dict_keys = [ 'src', 'path', 'fstype', 'opts', 'dump', 'passno' ] -%}
        {% set dict_values = item.split(' ') -%}
        {% set mount = dict(dict_keys | zip(dict_values)) -%}
        {% if not ansible_local.bootstrapped | default(false) -%}
          {% set mount = mount | combine({"path": root_target + mount["path"]})  -%}
        {% endif -%}
        {{ fstab | default([]) + [ mount ] }}
    when: item.split(' ') | length >= 4 and not item[0] == '#'
    loop: "{{ ( fstab_slurp.content | b64decode).split('\n')
              | map('regex_replace', '\t', ' ')
              | map('regex_replace', ' +', ' ')
              | list }}"

  - name: Getting mounted filesystems
    slurp:
      src: /proc/mounts
    register: mounted_slurp

  - name: Parsing mounted filesystems
    set_fact:
      mounted: "{{ mounted | default([]) + [ dict(
                 [ 'src', 'path', 'fstype', 'opts', 'dump', 'passno' ]
                 | zip( item.split(' ') )
                )] }}"
    when: item.split(' ') | length >= 4 and not item[0] == '#'
    loop: "{{ ( mounted_slurp.content | b64decode).split('\n')
              | map('regex_replace', '\t', ' ')
              | map('regex_replace', ' +', ' ')
              | list }}"

  - name: Calculating filesystems that needs to be mounted
    set_fact:
      to_mount: "{{ fstab | default([]) | difference( mounted | default([]) ) }}"

  - name: Mounting filesystems
    command:
      warn: no
      argv: [ "mount", "{{ item.src }}", "{{ item.path }}", "-t", "{{ item.fstype }}", "-o", "{{ item.opts }},x-mount.mkdir" ]
    changed_when: no
    loop: "{{ to_mount }}"

  - name: Preparing chroot environment on not bootstrapped systems
    command:
      warn: no
      argv: "{{ [ 'mount', item[0], root_target + item[1], item[3] ] | flatten }}"
    changed_when: no
    loop:
      - [ "proc"            ,"/proc"                    , true                     , [ "-t", "proc",     "-o", "nosuid,noexec,nodev"                ] ]
      - [ "sys"             ,"/sys"                     , true                     , [ "-t", "sysfs",    "-o", "nosuid,noexec,nodev,ro"             ] ]
      - [ "udev"            ,"/dev"                     , true                     , [ "-t", "devtmpfs", "-o", "mode=0755,nosuid"                   ] ]
      - [ "devpts"          ,"/dev/pts"                 , true                     , [ "-t", "devpts",   "-o", "mode=0620,gid=5,nosuid,noexec"      ] ]
      - [ "shm"             ,"/dev/shm"                 , true                     , [ "-t", "tmpfs",    "-o", "mode=1777,nosuid,nodev"             ] ]
      - [ "tmp"             ,"/tmp"                     , true                     , [ "-t", "tmpfs",    "-o", "mode=1777,strictatime,nodev,nosuid" ] ]
      - [ "efivarfs"        ,"/sys/firmware/efi/efivars", "{{ system_uses_uefi }}" , [ "-t", "efivarfs", "-o", "nosuid,noexec,nodev"                ] ]
      - [ "/run"            ,"/run"                     , true                     , [ "--bind"                                                     ] ]
      - [ "/etc/resolv.conf","/etc/resolv.conf"         , true                     , [ "--bind"                                                     ] ]
    when: item[2] and not ansible_local.bootstrapped | default(false)

  - name: Preinstalling pacman on not bootstrapped systems
    command: >
      unshare --fork --pid
      pacman --noconfirm --noprogressbar --sync --refresh
        --root "{{ root_target }}"
        pacman
    when: not ansible_local.bootstrapped | default(false)

  # Pacman ansible module install package by package so using command make things a lot faster.
  - name: Installing packages marked as explicit
    command: >
      pacman --noconfirm --noprogressbar --sync
      {% if pacman_sysupgrade or not ansible_local.bootstrapped | default(false) %}--refresh --sysupgrade {% endif %}
      {% if not ansible_local.bootstrapped | default(false) %}--sysroot {{ root_target }} {% endif %}
       --asexplicit --needed
      {{ ansible_local.pacman.explicit | join(" ") }}
    notify: Info about foreign packages (skipped if there is no foreign packages)
    when: ansible_local.pacman.explicit | length > 0

  # So we can install optional dependencies if we installed as deps as you should ;)
  - name: Installing packages marked as dependencies
    command: >
      pacman --noconfirm --noprogressbar --sync
      {% if not ansible_local.bootstrapped | default(false) %}--sysroot {{ root_target }} {% endif %}
       --asdeps --needed
      {{ ansible_local.pacman.dependencies | join(" ") }}
    notify: Info about foreign packages (skipped if there is no foreign packages)
    when: ansible_local.pacman.dependencies | length > 0

  - name: Find snippets
    find:
      depth: 1
      path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}{{ snippets }}"
    register: snippets

  - name: Execute all snippets
    command: >
      {% if ansible_local.bootstrapped | default(false) %}
        bash {{ item.path }}
      {% else %}
        chroot {{root_target}} bash {{ item.path | regex_replace( "^" + root_target, "") }}
      {% endif %}
    when: item.xusr | bool
    with_items: "{{ snippets.files }}"

  always:
  - name: Unmounting filesystems previously not mounted
    command:
      warn: no
      argv:
        - umount
        - "{{ item.path }}"
    changed_when: no
    loop: "{{ to_mount[::-1] | default ([])}}"

  - name: Unmounting chroot environment on not bootstrapped systems
    command:
      warn: no
      argv:
        - umount
        - -l
        - "{{ root_target + item[0] }}"
    changed_when: no
    loop:
      - [ "/dev/pts"                 , true                     ]
      - [ "/dev/shm"                 , true                     ]
      - [ "/sys/firmware/efi/efivars", "{{ system_uses_uefi }}" ]
      - [ "/proc"                    , true                     ]
      - [ "/sys"                     , true                     ]
      - [ "/dev"                     , true                     ]
      - [ "/tmp"                     , true                     ]
      - [ "/run"                     , true                     ]
      - [ "/etc/resolv.conf"         , true                     ]
    when: item[1] and not ansible_local.bootstrapped | default(false)
