---
- name: Installing rEFInd
  block:
  - name: Getting fstab
    slurp:
      src: "{% if not ansible_local.bootstrapped | default(false) -%}{{ root_target }}{% endif -%}/etc/fstab"
    register: fstab_slurp

  - name: Parsing fstab file
    set_fact:
      fstab: >-
        {% set dict_keys = [ 'src', 'path', 'fstype', 'opts', 'dump', 'passno' ] -%}
        {% set dict_values = item.split(' ') -%}
        {% set mount = dict(dict_keys | zip(dict_values)) -%}
        {% if not ansible_local.bootstrapped | default(false) -%}
          {% set mount = mount | combine({"path": root_target + mount["path"]})  -%}
        {% endif -%}
        {{ fstab | default([]) + [ mount ] }}
    when: item.split(' ') | length >= 4 and not item[0] == '#'
    loop: "{{ ( fstab_slurp.content | b64decode).split('\n')
              | map('regex_replace', '\t', ' ')
              | map('regex_replace', ' +', ' ')
              | list }}"

  - name: Getting mounted filesystems
    slurp:
      src: /proc/mounts
    register: mounted_slurp

  - name: Parsing mounted filesystems
    set_fact:
      mounted: "{{ mounted | default([]) + [ dict(
                 [ 'src', 'path', 'fstype', 'opts', 'dump', 'passno' ]
                 | zip( item.split(' ') )
                )] }}"
    when: item.split(' ') | length >= 4 and not item[0] == '#'
    loop: "{{ ( mounted_slurp.content | b64decode).split('\n')
              | map('regex_replace', '\t', ' ')
              | map('regex_replace', ' +', ' ')
              | list }}"

  - name: Calculating filesystems that needs to be mounted
    set_fact:
      to_mount: "{{ fstab | default([]) | difference( mounted | default([]) ) }}"

  - name: Mounting filesystems
    command:
      warn: no
      argv: [ "mount", "{{ item.src }}", "{{ item.path }}", "-t", "{{ item.fstype }}", "-o", "{{ item.opts }},x-mount.mkdir" ]
    changed_when: no
    loop: "{{ to_mount }}"

  always:
  - name: Unmounting filesystems previously not mounted
    command:
      warn: no
      argv:
        - umount
        - "{{ item.path }}"
    changed_when: no
    loop: "{{ to_mount[::-1] | default ([])}}"
