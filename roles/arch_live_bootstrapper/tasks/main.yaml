---
- name: Check if discovered distribution match with the inventory
  assert:
    that: "( ansible_distribution | lower ) in group_names"
    fail_msg: "Expected to {{ansible_distribution|lower}} to be in those groups: {{ group_names | join(' ') }}"
    success_msg: "Distribution exists on host's groups"

- name: Check if this is an UEFI system
  stat:
    path: /sys/firmware/efi/efivars
  register: _uefi

- name: Get facts for not bootstrapped hosts
  block:
  - name: Creating temporary folder to download the host's metadata repo
    tempfile:
      state: directory
    check_mode: no
    changed_when: no
    register: facts_temp

  - name: Remounting cowspace so can install needed packages
    ignore_errors: yes
    command:
      argv: [ mount, /run/archiso/cowspace, -o, size=4G, -o, remount ]
      warn: False
    changed_when: false

  - name: Syncing time
    command: timedatectl set-ntp true
    changed_when: False

  - name: Adding repos to pacman.conf
    blockinfile:
      path: "{{ pacman_config }}"
      block: "{{ item }}"
    loop: "{{ pacman_repositories | json_query('[*].definition') | flatten | unique }}"
    changed_when: false

  - name: Adding repositories key
    command: "pacman-key -r {{ item }}"
    retries: 10
    delay: 10
    register: _result
    until: _result.rc == 0
    loop: "{{ pacman_repositories | json_query('[*].keys') | flatten | unique }}"
    changed_when: false

  - name: Locally signing archzfs repo key
    command: "pacman-key --lsign-key {{ item }}"
    loop: "{{ pacman_repositories | json_query('[*].keys') | flatten | unique }}"
    changed_when: false

  - name: Refreshing package cache and updating live environment
    pacman:
      update_cache: yes
      update_cache_extra_args: "--config {{ pacman_config }} --refresh --refresh"
      upgrade: yes
      upgrade_extra_args: "--config {{ pacman_config }} --ignore linux,linux-headers"
    changed_when: false

  - name: Cleaning pacman cache
    command: "pacman -Scc --noconfirm"
    changed_when: false

  - name: Installing dependencies
    pacman:
      name:
        - parted
        - git
      extra_args: "--config {{ pacman_config }}"
    changed_when: false

  - name: Downloading host's metadata
    git:
      repo: "{{ metadata_repo }}/homd-{{ inventory_hostname_short }}"
      dest: "{{ facts_temp.path }}"
      accept_hostkey: yes
      version: "{{ etckeeper_branch | default ('etckeeper')}}"
    ignore_errors: yes
    changed_when: false

  - name: Gather facts with extra host metadata
    setup:
      fact_path: "{{ facts_temp.path }}/ansible/facts.d"

  - name: Cleaning temporary metadata repo
    file:
      path: "{{ facts_temp.path }}"
      state: absent
    check_mode: no
    changed_when: false
  when: not ansible_local.bootstrapped | default(false)

- name: Setting if system variables
  set_fact:
    _system_uses_zfs: >
      {{ 'zfs'   in (ansible_local.disk_layout | json_query('[*].step') | default ([])) or
         'zpool' in (ansible_local.disk_layout | json_query('[*].step') | default ([]))    }}
    _system_uses_uefi: _uefi.stat.exists

- name: Prepare live CD for systems tht uses ZFS
  block:
  - name: Loading ZFS module (Could fail if no zfs module is available)
    modprobe:
      name: zfs
      state: present
    changed_when: false
    ignore_errors: yes
    register: _zfs

  - name: Installing ZFS module if last step failed
    block:
      - name: Installing ZFS using archiso package (Could fail if dependency problem)
        pacman:
          name:
            - zfs-archiso-linux
            - zfs-utils
          extra_args: "--config {{ pacman_config }}"
        changed_when: false
    rescue:
      - name: Installing kernel headers for compiling ZFS module (Fallback from past step)
        command: "pacman -U --config {{ pacman_config }} --needed --noconfirm https://archive.archlinux.org/packages/l/linux-headers/linux-headers-{{ kernel_package_suffix }}-x86_64{{ arch_package_extension }}"
        vars:
          kernel_package_suffix: "{{ ansible_kernel | regex_replace('^(.*)-arch(.*)$', '\\1.arch\\2') }}"
        changed_when: false
      - name: Installing ZFS using dkms package
        pacman:
          name:
            - zfs-dkms
            - zfs-utils
          extra_args: "--config {{ pacman_config }}"
        changed_when: false
    always:
      - name: Loading ZFS module
        modprobe:
          name: zfs
          state: present
        changed_when: false
        register: _zfs
        failed_when: _zfs.state != "present"
    when: _zfs.state != "present" or _zfs.failed
  when: not ansible_local.bootstrapped | default(false) and _system_uses_zfs
