---
- name: Setting system variables
  set_fact:
    _system_uses_zfs: >
      {{ 'zfs'   in (ansible_local.disk_layout | json_query('[*].step') | default ([])) or
         'zpool' in (ansible_local.disk_layout | json_query('[*].step') | default ([]))    }}

- name: Creating filesystem directories on target
  file:
    path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}{{ item[0] }}"
    mode: "{{ item[1] }}"
    state: directory
  when: "item[2]"
  loop:
    - [ /var/cache/pacman/pkg, "0755", true ]
    - [ /var/lib/pacman      , "0755", true ]
    - [ /var/log             , "0755", true ]
    - [ /dev                 , "0755", true ]
    - [ /run                 , "0755", true ]
    - [ /etc                 , "0755", true ]
    - [ /tmp                 , "1777", true ]
    - [ /sys                 , "0555", true ]
    - [ /proc                , "0555", true ]

- name: Downloading host's metadata
  git:
    repo: "{{ metadata_repo }}/homd-{{ inventory_hostname_short }}"
    dest: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}/etc"
    accept_hostkey: yes
    version: "{{ etckeeper_branch | default ('etckeeper')}}"
  register: _etckeeper

- name: Gather facts with extra host metadata (if last changed)
  setup:
    fact_path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}/etc/ansible/facts.d{% else %}{{ omit }}{% endif %}"
  when: _etckeeper.changed

- name: Creating filesystem directories on target
  file:
    path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}{{ item[0] }}"
    mode: "{{ item[1] }}"
    state: directory
  when: "item[2]"
  loop:
    - [ /etc/pacman.d, "0755", true                     ]
    - [ /etc/zfs     , "0755", "{{ _system_uses_zfs }}" ]

- name: Reset/create zpool cache files
  block:
  - name: Unsetting any cache file on zpools
    command: "zpool set cachefile=none {{ item }}"
    with_items: "{{ ansible_local.disk_layout | json_query(\"[?step=='zpool'].name\") }}"

  - name: Deleting old cache file
    file:
      path: /etc/zfs/zpool.cache
      state: absent

  - name: Creating new cache files
    command: "zpool set cachefile=/etc/zfs/zpool.cache {{ item }}"
    with_items: "{{ ansible_local.disk_layout | json_query(\"[?step=='zpool'].name\") }}"

  - name: Move cache file to target systems
    copy:
      src: /etc/zfs/zpool.cache
      dest: "{{root_target}}/etc/zfs/zpool.cache"
      remote_src: yes
  when: (not ansible_local.bootstrapped | default(false) or force_bootstrapping or force_zfs) and _system_uses_zfs

- name: Preparing non-bootstrapped systems
  block:
  - name: Ensure everything in fstab is mounted
    debug:
      msg: TODO

  - name: Restoring latest backup
    block:
    - name: Creating password file
      tempfile:
        state: file
        suffix: restic
      register: restic_passfile
      changed_when: no

    - name: Saving password on passfile
      copy:
        content: "{{ restic_password }}"
        dest: "{{ restic_passfile.path }}"
      changed_when: no

    - name: Finding all restic configuration files
      find:
        contains: "^BACKUP_PATH="
        depth: 1
        path: "{{root_target}}/etc/restic"
        patterns: "*.conf"
      register: restic_config_files

    - name: Restoring every restic backup found
      command:
        argv:
          - /bin/bash
          - -c
          - |
            set -a
            source "{{ item }}"
            unset RESTIC_PASSWORD_COMMAND

            restic restore latest \
              --host="{{ inventory_hostname_short }}" \
              --path="$BACKUP_PATH" \
              --password-file="{{ restic_passfile.path }}" \
              --target="{{ root_target }}" \
              $EXTRA_GLOBAL_ARGS \
              $EXTRA_RESTORE_ARGS
      with_items: "{{ restic_config_files | json_query(\"files[*].path\") }}"
      register: restic_result
      failed_when: restic_result.rc != 0
    always:
    - name: Deleting password file
      file:
        path: "{{ restic_passfile.path }}"
        state: absent
      changed_when: no
  when: not ansible_local.bootstrapped | default(false)

- name: Installing packages
  block:
  - name: Creating resolv.conf for non existing on systems being bootstraped
    file:
      state: touch
      path: "{{ root_target }}/etc/resolv.conf"
    register: resolv_conf
    when: not ansible_local.bootstrapped | default(false)

  - name: Preparing chroot environment on not bootstrapped systems
    command:
      warn: no
      argv: "{{ [ 'mount', item[0], root_target+item[1], item[3] ] | flatten }}"
    changed_when: no
    loop:
      - [ "proc"            ,"/proc"                    , true                      , [ "-t", "proc",     "-o", "nosuid,noexec,nodev"                ] ]
      - [ "sys"             ,"/sys"                     , true                      , [ "-t", "sysfs",    "-o", "nosuid,noexec,nodev,ro"             ] ]
      - [ "udev"            ,"/dev"                     , true                      , [ "-t", "devtmpfs", "-o", "mode=0755,nosuid"                   ] ]
      - [ "devpts"          ,"/dev/pts"                 , true                      , [ "-t", "devpts",   "-o", "mode=0620,gid=5,nosuid,noexec"      ] ]
      - [ "shm"             ,"/dev/shm"                 , true                      , [ "-t", "tmpfs",    "-o", "mode=1777,nosuid,nodev"             ] ]
      - [ "tmp"             ,"/tmp"                     , true                      , [ "-t", "tmpfs",    "-o", "mode=1777,strictatime,nodev,nosuid" ] ]
      - [ "efivarfs"        ,"/sys/firmware/efi/efivars", "{{ _system_uses_uefi }}" , [ "-t", "efivarfs", "-o", "nosuid,noexec,nodev"                ] ]
      - [ "/run"            ,"/run"                     , true                      , [ "--bind"                                                     ] ]
      - [ "/etc/resolv.conf","/etc/resolv.conf"         , true                      , [ "--bind"                                                     ] ]
    when: item[2] and not ansible_local.bootstrapped | default(false)

  - name: Preinstalling pacman on not bootstrapped systems
    command: >
      unshare --fork --pid
      pacman --noconfirm --noprogressbar --sync --refresh
        --root "{{ root_target }}"
        pacman
    when: not ansible_local.bootstrapped | default(false)

  # Pacman ansible module install package by package so using command make things a lot faster.
  - name: Installing packages marked as explicit
    command: >
      pacman --noconfirm --noprogressbar --sync
      {% if pacman_sysupgrade or not ansible_local.bootstrapped | default(false) %}--refresh --sysupgrade {% endif %}
      {% if not ansible_local.bootstrapped | default(false) %}--sysroot {{ root_target }} {% endif %}
       --asexplicit --needed
      {{ ansible_local.pacman.explicit | join(" ") }}
    notify: Info about foreign packages (skipped if there is no foreign packages)
    when: ansible_local.pacman.explicit | length > 0

  # So we can install optional dependencies if we installed as deps as you should ;)
  - name: Installing packages marked as dependencies
    command: >
      pacman --noconfirm --noprogressbar --sync
      {% if not ansible_local.bootstrapped | default(false) %}--sysroot {{ root_target }} {% endif %}
       --asdeps --needed
      {{ ansible_local.pacman.dependencies | join(" ") }}
    notify: Info about foreign packages (skipped if there is no foreign packages)
    when: ansible_local.pacman.dependencies | length > 0

  - name: Find bootstrap snippets
    find:
      depth: 1
      path: "{% if not ansible_local.bootstrapped | default(false) %}{{root_target}}{% endif %}/etc/ansible/bootstrap-snippets"
    register: snippets

  - name: Execute all snippets
    command: >
      {% if ansible_local.bootstrapped | default(false) %}
        bash {{ item.path }}
      {% else %}
        chroot {{root_target}} bash {{ item.path | regex_replace( "^" + root_target, "") }}
      {% endif %}
    when: item.xusr | bool
    with_items: "{{ snippets.files }}"

  always:
  - name: Unmounting chroot environment on not bootstrapped systems
    command:
      warn: no
      argv:
        - umount
        - -l
        - "{{ root_target + item[0] }}"
    changed_when: no
    loop:
      - [ "/dev/pts"                 , true                      ]
      - [ "/dev/shm"                 , true                      ]
      - [ "/sys/firmware/efi/efivars", "{{ _system_uses_uefi }}" ]
      - [ "/proc"                    , true                      ]
      - [ "/sys"                     , true                      ]
      - [ "/dev"                     , true                      ]
      - [ "/tmp"                     , true                      ]
      - [ "/run"                     , true                      ]
      - [ "/etc/resolv.conf"         , true                      ]
    when: item[1] and not ansible_local.bootstrapped | default(false)

  - name: Deleting resolv.conf if it did not exist
    file:
      state: absent
      path: "{{ root_target }}/etc/resolv.conf"
    register: resolv_conf
    when: resolv_conf.changed | default(false)
    changed_when: false
